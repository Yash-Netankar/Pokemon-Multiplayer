{"version":3,"sources":["components/MainMenu.jsx","game/Pokemon.jsx","components/forms/CreateGame.jsx","components/forms/JoinGame.jsx","components/App.js","index.js"],"names":["error_div_create","error_div_join","input_room","input_player","input_player_create","input_room_join","socket","io","connect","allData","track_no_of_rounds","style","color","show","display","none","Pokemon","useParams","name","room","useHistory","useState","num","setNum","pname","setName","moves","setMoves","image","setImage","round","setRound","countdown","setCountdown","sidebar1","setSidebar1","sidebar2","setSidebar2","msg","setMsg","list_of_users","setList_of_users","setDisplay","getAllData","a","axios","get","data","results","forEach","item","url","then","length","sprites","front_default","useEffect","interval","setInterval","setTimeout","clearInterval","msg_box","document","querySelector","emit","on","msg_div","createElement","classList","add","h4","innerText","p","append","winner","score","disabled","Round","parseInt","list","play","e","preventDefault","access","Object","keys","alert","className","textAlign","Button","onClick","onSubmit","focus","autoComplete","TextField","id","label","onChange","target","value","width","type","map","user","i","margin","border","placeholder","min","max","background","src","alt","CreateGame","showTabs","Validate","tab1","required","JoinGame","tab2","MainMenu","history","no_of_players","setNo_of_players","setShowTabs","test","players","obj","joined","push","App","path","exact","render","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.abf2095c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport CreateGame from \"./forms/CreateGame\";\r\nimport JoinGame from \"./forms/JoinGame\";\r\n\r\nimport io from \"socket.io-client\";\r\nconst socket = io.connect(\"/\");\r\n\r\nlet error_div_create, error_div_join, input_room, input_player, input_player_create, input_room_join;\r\n\r\nconst MainMenu = () => {\r\n    const history = useHistory();\r\n    const [no_of_players, setNo_of_players] = useState(2);\r\n\r\n    useEffect(() => {\r\n        input_room = document.querySelector(\".input_room\");\r\n        input_player_create = document.querySelector(\".input_player_create\");\r\n        error_div_create = document.querySelector(\".error_div_create\");\r\n        error_div_create.innerText = \"\"\r\n\r\n        input_room_join = document.querySelector(\".input_room_join\");\r\n        input_player = document.querySelector(\".input_player\");\r\n        error_div_join = document.querySelector(\".error_div_join\");\r\n        error_div_join.innerText = \"\";\r\n\r\n        socket.on(\"room_created_error\", msg => {\r\n            error_div_create.innerText = `${msg.msg}`;\r\n        });\r\n        socket.on(\"room_joined_error\", msg => {\r\n            error_div_join.innerText = msg.msg;\r\n        })\r\n    }, [])\r\n\r\n\r\n    /**************TOOGLING TABS*******************/\r\n    const [showTabs, setShowTabs] = useState({\r\n        tab1: true,\r\n        tab2: false\r\n    });\r\n\r\n    /********VALIDATING INFORMATION****************/\r\n    //validating create room info\r\n    const ValidateCreateInfo = (e) => {\r\n        e.preventDefault();\r\n        let room_regexp = /^([a-zA-Z]{3,12})\\d{0,4}$/;\r\n        if (input_room.value.length <= 12 && input_room.value.length >= 3) {\r\n            if (room_regexp.test(input_room.value)) {\r\n                socket.emit(\"create_room\", { room: input_room.value, players: input_player_create.value });\r\n                socket.on(\"room_created\", (obj) => {\r\n                    if (obj.room) {\r\n                        error_div_create.innerText = `Game Room '${obj.room}' \r\n                        Created`;\r\n                        setNo_of_players(obj.players);\r\n                    }\r\n                })\r\n            }\r\n            else\r\n                error_div_create.innerText = \"Enter A Room name that Starts with alphabets & can only have 4 digits!!\"\r\n        }\r\n        else\r\n            error_div_create.innerText = \"Room name should have atleast 3 characters & atmost 12 characters!!\"\r\n    }\r\n    //validating join room info\r\n    const ValidateJoinInfo = (e) => {\r\n        e.preventDefault();\r\n        let name_regexp = /^([a-zA-Z]){3,12}([@\\s-_.]?)\\d{0,2}$/;\r\n        let room_regexp = /^([a-zA-Z]{3,12})\\d{0,4}$/;\r\n        if (input_player.value.length <= 12 && input_player.value.length >= 3) {\r\n            if (name_regexp.test(input_player.value)) {\r\n                if (room_regexp.test(input_room_join.value)) {\r\n                    socket.emit(\"join_room\", { room: input_room_join.value, name: input_player.value, players: no_of_players })\r\n                    socket.on(\"room_joined\", (obj) => {\r\n                        if (obj.joined) {\r\n                            error_div_join.innerText = \"Joined!!\"\r\n                            history.push(`/game/${input_player.value}/${input_room_join.value}`);\r\n                        }\r\n                        else {\r\n                            history.push(\"/\");\r\n                        }\r\n                    })\r\n                }\r\n                else\r\n                    error_div_join.innerText = \"Invalid Room Name!! Check what name you've got and correct.\"\r\n            }\r\n            else\r\n                error_div_join.innerText = \"Name should begin with Alphabets, can have 2 digits & only '@', '-'m, '_' as spacial characters.\";\r\n        }\r\n        else\r\n            error_div_join.innerText = \"Name should have atleast 3 characters & atmost 12 characters!!\"\r\n    }\r\n\r\n    /**********JSX*************/\r\n    return (\r\n        <div className=\"menu_container\">\r\n            <div className=\"tabs_div\">\r\n                {/* head */}\r\n                <header className=\"tab_head\">\r\n                    <Button className=\"head_btn create_btn\" onClick={() => { setShowTabs({ tab1: true, tab2: false }) }}>Create Game\r\n                    </Button>\r\n                    <Button className=\"head_btn join_btn\" onClick={() => { setShowTabs({ tab1: false, tab2: true }) }}>Join Game\r\n                    </Button>\r\n                </header>\r\n                <CreateGame showTabs={showTabs} Validate={ValidateCreateInfo} />\r\n                <JoinGame showTabs={showTabs} Validate={ValidateJoinInfo} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainMenu\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ChatIcon from '@material-ui/icons/ChatBubbleOutlineOutlined';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport People from '@material-ui/icons/PeopleAlt';\r\nimport Close from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport io from \"socket.io-client\";\r\nconst socket = io.connect(\"/\");\r\n\r\n\r\nlet allData = {};\r\nlet track_no_of_rounds = 0;\r\n\r\n// styles\r\nconst style = { color: \"#ff4757\" }\r\nconst show = { display: \"block\" }\r\nconst none = { display: \"none\" }\r\n\r\nconst Pokemon = () => {\r\n    const { name, room } = useParams();\r\n    const history = useHistory();\r\n\r\n    const [num, setNum] = useState(1);\r\n\r\n    const [pname, setName] = useState();\r\n    const [moves, setMoves] = useState();\r\n    const [image, setImage] = useState(\"\");\r\n\r\n    const [round, setRound] = useState(10);\r\n\r\n    const [countdown, setCountdown] = useState(10);\r\n\r\n    const [sidebar1, setSidebar1] = useState(false);\r\n    const [sidebar2, setSidebar2] = useState(false);\r\n\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [list_of_users, setList_of_users] = useState([]);\r\n\r\n    const [display, setDisplay] = useState(true);\r\n\r\n    // get all data\r\n    const getAllData = async () => {\r\n        let data = await axios.get('https://pokeapi.co/api/v2/pokemon/?limit=691');\r\n        data.data.results.forEach(item => {\r\n            axios.get(item.url).then(data => {\r\n                allData[data.data.name] = [data.data.moves.length, data.data.sprites.front_default];\r\n            });\r\n        })\r\n    }\r\n\r\n    // show game after 6 seconds so that all data is loaded, COUNTDOWN\r\n    useEffect(() => {\r\n        let interval = setInterval(() => {\r\n            setCountdown(countdown - 1);\r\n        }, 1000);\r\n        setTimeout(() => {\r\n            setDisplay(false)\r\n            clearInterval(interval);\r\n        }, 10000);\r\n    }, [countdown])\r\n\r\n\r\n    useEffect(() => {\r\n        getAllData();\r\n        /*****************SOCKET HANDLING****************** */\r\n        let msg_box = document.querySelector(\".msg_box\");\r\n\r\n        socket.emit(\"join\", room);\r\n        socket.on(\"list_of_users\", list_of_users => {\r\n            setList_of_users(list_of_users);\r\n        });\r\n\r\n        socket.on(\"chat-msg-send\", data => {\r\n            let msg_div = document.createElement(\"div\");\r\n            msg_div.classList.add(\"msg_div\");\r\n            let h4 = document.createElement(\"h4\");\r\n            h4.classList.add(\"name\");\r\n            h4.innerText = data.name;\r\n            let p = document.createElement(\"p\");\r\n            p.classList.add(\"msg\");\r\n            p.innerText = data.msg;\r\n            msg_div.append(h4);\r\n            msg_div.append(p);\r\n            msg_box.append(msg_div);\r\n        });\r\n\r\n\r\n        // updating winner's score\r\n        socket.on(\"winner\", (data) => {\r\n            let score_div = document.querySelector(`.${data.winner}-score`);\r\n            score_div.innerText = data.score;\r\n            document.querySelector(\".play_btn\").disabled = false;\r\n            document.querySelector(\".play_btn\").style.display = \"block\";\r\n            track_no_of_rounds++;\r\n        });\r\n\r\n        //set round\r\n        socket.on(\"set_rounds\", data => {\r\n            let Round = parseInt(data.round);\r\n            setRound(Round);\r\n            document.querySelector(\".round_head\").innerText = `You'll be playing ${Round} rounds.`\r\n        });\r\n\r\n        //game winner\r\n        socket.on(\"game_winner\", data => {\r\n            document.querySelector(\".winner\").innerText = `${data.name} wins this game by ${data.score} points.`;\r\n            // setTimeout(() => {\r\n            //     history.push(\"/\");\r\n            //     // https://pokemon-multiplayer.herokuapp.com/\r\n            // }, 6000);\r\n        })\r\n\r\n        // user leaving\r\n        socket.on(\"disconnect_user\", list => {\r\n            setList_of_users(list)\r\n        })\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n\r\n    // form submit for chat\r\n    const Submit = (e) => {\r\n        e.preventDefault();\r\n        if (msg.length >= 100) {\r\n            alert(\"Message should contain only 100 chars.\");\r\n        }\r\n        else {\r\n            socket.emit(\"chat-msg\", { room, name, msg });\r\n            setMsg(\"\");\r\n            document.querySelector(\"#standard-basic\").focus();\r\n        }\r\n    }\r\n\r\n    //GAME\r\n    const play = async (e) => {\r\n        e.preventDefault();\r\n        if (track_no_of_rounds === round) {\r\n            socket.emit(\"winner\", room);\r\n        }\r\n        else {\r\n\r\n            let access = allData[Object.keys(allData)[num]];\r\n            if (num >= 1 && num <= 690) {\r\n                setName(Object.keys(allData)[num]);\r\n                setMoves(access[0]);\r\n                setImage(access[1]);\r\n                // now playing the game with other players in room\r\n                document.querySelector(\".play_btn\").disabled = true;\r\n                document.querySelector(\".play_btn\").style.display = \"none\"\r\n                socket.emit(\"play\", { name, room, moves: access[0] });\r\n            }\r\n            else\r\n                alert(\"Number Should be greater than 0 and less than 690\");\r\n        }\r\n    }\r\n\r\n    //ROUNDS\r\n    const SetRounds = (e) => {\r\n        e.preventDefault();\r\n        if (round >= 10 && round <= 500) {\r\n            socket.emit(\"round\", { round, room });\r\n        }\r\n        else {\r\n            alert(\"You can play maximum 500 rounds and minimum 10.\")\r\n        }\r\n    }\r\n    //JSX\r\n    return (\r\n        <>\r\n            <div className=\"begin\" style={display ? show : none}>\r\n                <h1 style={{ textAlign: \"center\" }}>The Game will Begin in {countdown} seconds...</h1>\r\n            </div>\r\n            <div className=\"game_container\" style={display ? none : show}>\r\n                <header className=\"game_header\">\r\n                    <div className=\"logo\">\r\n                        <Button className=\"chat_btn\"\r\n                            onClick={() => {\r\n                                setSidebar1(true)\r\n                                setSidebar2(false)\r\n                            }}>\r\n                            <ChatIcon />\r\n                        </Button>\r\n                        <h1>Pokemon</h1>\r\n                    </div>\r\n                    <Button onClick={() => {\r\n                        setSidebar1(false)\r\n                        setSidebar2(true)\r\n                    }}>\r\n                        <People />\r\n                    </Button>\r\n                </header>\r\n                {/* sidebars */}\r\n                <div className={sidebar1 ? \"sidebar1 show\" : \"sidebar1\"}>\r\n                    <section className=\"sidebar1_head\">\r\n                        <h1>Chats</h1>\r\n                        <Button onClick={() => setSidebar1(false)}>\r\n                            <Close />\r\n                        </Button>\r\n                    </section>\r\n                    {/* chat box */}\r\n                    <main className=\"chat_body\">\r\n                        <div className=\"msg_box\"></div>\r\n                        <form className=\"msg_input_box\" onSubmit={Submit} autoComplete=\"off\">\r\n                            <TextField id=\"standard-basic\" label=\"Your Message\" onChange={(e) => setMsg(e.target.value)} value={msg} style={{ width: '85%' }} />\r\n                            <Button type=\"submit\" className=\"send-btn\">\r\n                                <SendIcon />\r\n                            </Button>\r\n                        </form>\r\n                    </main>\r\n                </div>\r\n                <div className={sidebar2 ? \"sidebar2 show\" : \"sidebar2\"}>\r\n                    <section className=\"sidebar2_head\">\r\n                        <h1>Users</h1>\r\n                        <Button onClick={() => setSidebar2(false)}>\r\n                            <Close />\r\n                        </Button>\r\n                    </section>\r\n                    <ul className=\"users_list\">\r\n                        {\r\n                            list_of_users.map((user, i) => {\r\n                                return (\r\n                                    <li key={i}>{user}</li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                {/* leaderboard */}\r\n                <h1 style={{ margin: \"1rem auto\", textAlign: \"center\" }} className=\"winner\">.</h1>\r\n                <div className=\"leaderboard\">\r\n                    <h1>LEADERBOARD</h1>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                {\r\n                                    list_of_users.map((user, i) => {\r\n                                        return (\r\n                                            <th key={i}>{user}</th>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                {\r\n                                    list_of_users.map((user, i) =>\r\n                                        <td key={i} className={`${user}-score`}>0</td>\r\n                                    )\r\n                                }\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                {/* no of rounds */}\r\n                <div className=\"rounds\" style={{ border: \"1px solid black\" }}>\r\n                    <h2 style={{ textAlign: \"center\" }} className=\"round_head\">Set Number Of Rounds You all gonna play, before you start playing this game</h2>\r\n                    <form className=\"rounds_div\" autoComplete=\"off\" onSubmit={SetRounds}>\r\n                        <input type=\"number\" className=\"round_ip\" placeholder=\"Enter Number Of Rounds You'all gonna play\" onChange={(e) => setRound(e.target.value)}\r\n                            value={round} min=\"10\" max=\"500\"\r\n                        />\r\n                        <Button type=\"submit\" className=\"round_btn\">Set</Button>\r\n                    </form>\r\n                </div>\r\n                {/* gameCard */}\r\n                <div className=\"card-container\">\r\n                    <form autoComplete=\"off\" className=\"card_input\" onSubmit={play}>\r\n                        <input\r\n                            type=\"number\"\r\n                            onChange={(e) => { setNum(e.target.value) }}\r\n                            value={num}\r\n                            placeholder=\"Enter Card no\"\r\n                            className=\"num_input\"\r\n                        />\r\n                        <Button type=\"submit\" className=\"play_btn\">Play</Button>\r\n                    </form>\r\n                    <div className=\"card\" style={{ background: `linear-gradient(to left top, #ffffff52, black), url(${image})` }}>\r\n                        <div className=\"img-div\">\r\n                            {image ? <img src={image} alt={pname} /> : \"\"}\r\n                        </div>\r\n                        <h1>You Select <span style={style}>{pname}</span></h1>\r\n                        <h3>{pname} has <span style={style}>{moves}</span> moves</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Pokemon;","import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nconst CreateGame = ({ showTabs, Validate }) => {\r\n    return (\r\n        <form onSubmit={Validate} className={showTabs.tab1 ? \"tab1 show\" : \"tab1\"} autoComplete=\"off\">\r\n            <p>NOTE: Only 7 players can join one Gameroom.</p>\r\n            <p className=\"error_div_create error\"></p>\r\n            <input type=\"text\" placeholder=\"Create Room Name\" className=\"input_room\" min=\"2\" max=\"7\" required />\r\n            <input type=\"Number\" placeholder=\"Enter Number of players joining\" className=\"input_player_create\" min=\"2\" max=\"7\" required />\r\n            <Button type=\"submit\" className=\"create\">Create</Button>\r\n            <p className=\"gameID\"></p>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CreateGame\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nconst JoinGame = ({ showTabs, Validate }) => {\r\n    return (\r\n        <form onSubmit={Validate} className={showTabs.tab2 ? \"tab2 show\" : \"tab2\"} autoComplete=\"off\">\r\n            <p>Enter Your Game ID here to join the game</p>\r\n            <p className=\"error_div_join error\"></p>\r\n            <input type=\"text\" placeholder=\"Enter Your NickName\" className=\"input_player\" required />\r\n            <input type=\"text\" placeholder=\"Enter Room Name\" className=\"input_room input_room_join\" required />\r\n            <Button type=\"submit\" className=\"join\">Join</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default JoinGame\r\n","import React from 'react';\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport Pokemon from \"../game/Pokemon\";\r\nimport MainMenu from \"./MainMenu\";\r\nimport \"../styles/main.css\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Route path=\"/\" exact render={() => <MainMenu />} />\r\n            <Route path=\"/game/:name/:room\" exact render={() => <Pokemon />} />\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}